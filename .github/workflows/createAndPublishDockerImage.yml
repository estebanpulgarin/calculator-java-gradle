name: Create And Publish Docker Image

on:
  workflow_call:
    secrets:
      REGISTRY_PASSWORD:
        required: true

jobs:
  acr:
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      ACR_NAME: acrreto
      IMAGE_NAME: calculator-java-gradle
      IMAGE_TAG: ${{ github.run_number }}
      ACR_PASS: ${{ secrets.REGISTRY_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: package
          path: build/libs

      - name: Docker Login
        run: |
          docker login $ACR_NAME.azurecr.io -u $ACR_NAME -p $ACR_PASS

      - name: Build Image
        run: |
          docker build . -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG
            
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: '${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Grype vulnerability scanner
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype version
          grype db update
          pip install termgraph
          git clone https://github.com/opt-nc/grype-contribs.git
          cd grype-contribs
          export IMAGE=$ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG
          echo "☝️ About to analyze $IMAGE with grype ❕"
          grype $IMAGE -o template -t tmpl/csv-vulnerability_id-severity-no-headers.tmpl > work/analysis.csv
          echo "✅ grype analysis done."
          echo "$(tail -n +2 work/analysis.csv)" > work/analysis.csv
          echo "➕ Aggregating datas :"
          awk -F, '{a[$1]+=$2;}END{for(i in a)print i", "a[i];}' work/analysis.csv > work/analysis-aggregated.csv
          cat work/analysis-aggregated.csv
          echo "📊 Charting analysis"
          termgraph  work/analysis-aggregated.csv --title "🛡️  Grype report for [${IMAGE}] 🐳"
          grype $IMAGE -o template -t tmpl/html-table.tmpl > work/analysis.html
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: grype-reports
          path: grype-contribs/work
          
      - name: Push Image    
        run: |
          docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG
          
  # ghcr:
  #   env:
  #     REGISTRY: ghcr.io
  #     IMAGE_NAME: calculator-java-gradle
  #   runs-on: ubuntu-latest
  #   # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
  #   permissions: write-all
  #     # contents: read
  #     # packages: write
  #     # id-token: write
  #     # attestations: write

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
      
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: package
  #         path: build/libs

  #     - name: Display structure of downloaded files
  #       run: ls -R build/libs

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v3.1.0
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
      
  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@v5.5.1
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  #     - name: Build and push Docker image
  #       id: push
  #       uses: docker/build-push-action@v5.3.0
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  #     - name: Generate artifact attestation
  #       uses: actions/attest-build-provenance@v1
  #       with:
  #         subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
  #         subject-digest: ${{ steps.push.outputs.digest }}
  #         push-to-registry: true